def gradleUserHome = ''

if (System.properties['gradle.user.home']){
    	gradleUserHome = System.properties['gradle.user.home']
} else if (System.getenv('GRADLE_USER_HOME')){
    	gradleUserHome = System.getenv('GRADLE_USER_HOME')
} else if (System.properties['user.home']){
    	gradleUserHome = "${System.properties['user.home']}/.gradle"
} 

Properties props = new Properties()
if (new File("$gradleUserHome/gradle.properties").exists()){
	props.load(new FileInputStream("$gradleUserHome/gradle.properties"))
}

def artifactoryUser = System.getenv('ARTIFACTORY_USER') ?: props.ARTIFACTORY_USER
def artifactoryPassword = System.getenv('ARTIFACTORY_PASSWORD') ?: props.ARTIFACTORY_PASSWORD
def artifactoryHostPattern = (System.getenv('ARTIFACTORY_HOST_PATTERN') ?: props.ARTIFACTORY_HOST_PATTERN) ?: 'blackducksoftware.com/artifactory'

if(artifactoryUser != null && artifactoryPassword != null && artifactoryHostPattern != null){
	logger.lifecycle("Applying credentials for repositories matching ${artifactoryHostPattern}")

	repositories.each{
		configureRepositoryCredentials(it, artifactoryUser, artifactoryPassword, artifactoryHostPattern)
	}

	//whenObjectAdded is invoked to configure any repositories added after application of the configuration file
	repositories.whenObjectAdded{
		configureRepositoryCredentials(it, artifactoryUser, artifactoryPassword, artifactoryHostPattern)
	}
}else{
	logger.error("Credentials or address not provided for repository configuration Provider: (address: {}, user: {}, password: {})", (artifactoryHostPattern != null), (artifactoryUser != null), (artifactoryPassword != null))
}

def configureRepositoryCredentials(def repository, def artifactoryUser, def artifactoryPassword, def artifactoryHostPattern){
	if (repository.hasProperty('url') && repository.url.toString().contains("${artifactoryHostPattern}")){
		repository.credentials{
			username = artifactoryUser 
			password = artifactoryPassword 
		}
	}
}