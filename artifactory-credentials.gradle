//Allow application of credentials to a sub-set of repositories
//This fille is intended to be used in Gradle builds via "apply from: '{url}'", within blocks which have a "repositories" property (buildscript, project, allprojects, subprojects, etc)

//Check the various methods for setting the user's "Gradle home", and apply any gradle properties from that location
def gradleUserHome = ''

if (System.properties['gradle.user.home']){
    	gradleUserHome = System.properties['gradle.user.home']
} else if (System.getenv('GRADLE_USER_HOME')){
    	gradleUserHome = System.getenv('GRADLE_USER_HOME')
} else if (System.properties['user.home']){
    	gradleUserHome = "${System.properties['user.home']}/.gradle"
} 

Properties props = new Properties()
if (new File("$gradleUserHome/gradle.properties").exists()){
	props.load(new FileInputStream("$gradleUserHome/gradle.properties"))
}

//Read in user and password credentials, and a filter for which repositories to apply use of those credentials to
def artifactoryUser = System.getenv('ARTIFACTORY_USER') ?: props.ARTIFACTORY_USER
def artifactoryPassword = System.getenv('ARTIFACTORY_PASSWORD') ?: props.ARTIFACTORY_PASSWORD
def artifactoryHostPattern = (System.getenv('ARTIFACTORY_HOST_PATTERN') ?: props.ARTIFACTORY_HOST_PATTERN) ?: 'blackducksoftware.com/artifactory'

//Apply credentials, or if any reequired information is missing, log what is needed
if(artifactoryUser != null && artifactoryPassword != null && artifactoryHostPattern != null){
	logger.lifecycle("Applying credentials for repositories matching ${artifactoryHostPattern} (" + (hasProperty('name') ? "${name})" : ")"))

	// "all" applies to both repositories which have already been configured,
        // and any repositories added after application of the configuration file
	repositories.all{
		configureRepositoryCredentials(it, artifactoryUser, artifactoryPassword, artifactoryHostPattern)
	}
}else{
	logger.error("Credentials or address not provided for repository configuration Provider: (address: {}, user: {}, password: {})", (artifactoryHostPattern != null), (artifactoryUser != null), (artifactoryPassword != null))
}

def configureRepositoryCredentials(def repository, def artifactoryUser, def artifactoryPassword, def artifactoryHostPattern){
	if (repository.hasProperty('url') && repository.url.toString().contains("${artifactoryHostPattern}")){
		logger.info("Applying credentials for repository ${repository.url} (" + (hasProperty('name') ? "${name})" : ")"))
		
		repository.credentials{
			username = artifactoryUser 
			password = artifactoryPassword 
		}
	}
}
